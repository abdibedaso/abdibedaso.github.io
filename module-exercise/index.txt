1. Determine what this Javascript code will print out (without running it):
        x = 1;
        var a = 5;
        var b = 10;
        var c = function(a, b, c) {
            document.write(x);
            document.write(a);
            var f = function(a, b, c) {
                b = a;
                document.write(b);
                b = c;
                var x = 5;
            }
            f(a, b, c);
            document.write(b);
            var x = 10;
        }
        c(8, 9, 10);
        document.write(b);
        document.write(x);
 
undefined 8 8 9 10 1

2. Define Global Scope and Local Scope in Javascript.
 - Global scope is defined outside of all the functions, and can be seen inside functions and local scope is the scope inside functions.

3. Consider the following structure of Javascript code:

        // Scope A
        function XFunc() {
            // Scope B
            function YFunc() {
                // Scope C
            };
        };
    
    (a) Do statements in Scope A have access to variables defined in Scope B and C?
        
        - No, because the variables declared in B or C are local and are not visible in the outer environment.

    (b) Do statements in Scope B have access to variables defined in Scope A?

        - Yes, because the variables declared in the outer environment of the scope B are global, so they are visible inside of B, meaning that you can access them.

    (c) Do statements in Scope B have access to variables defined in Scope C?

        - No, because the variables inside of scope C are local and can be visible inside of C.

    (d) Do statements in Scope C have access to variables defined in Scope A?

        - Yes, because all the scopes inside functions have access in the outer environment’s variables.

    (e) Do statements in Scope C have access to variables defined in Scope B?

        - Yes, because you can access the outer environment variables.

4. What will be printed by the following (answer without running it)?

        var x = 9;

        function myFunction() {
            return x * x;
        }
        document.write(myFunction());
        x = 5;
        document.write(myFunction());
        
    81 and 25

5.
        var foo = 1;

        function bar() {
            if (!foo) {
                var foo = 10;
            }
            alert(foo);
        }
        bar();
    
    What will the alert print out? (Answer without running the code. Remember ‘hoisting’.)?

    10

6. Consider the following definition of an add( ) function to increment a counter variable:

            var add = (function() {
                var counter = 0;
                return function() {
                    return counter += 1;
                }
            })();
        
    Modify the above module to define a count object with two methods: add( ) and reset( ). The count.add( ) method adds one to the counter (as above). The count.reset( ) method sets the counter to 0.

        var count = (function() {
            let counter = 0;
            
            let add = function() {
                counter += 1;
            }
            
            let reset = function() {
                counter = 0;
            }
            
            return {
                add: add,
                reset: reset
            }
            
        })();
     
7. In the definition of add( ) shown in question 6, identify the "free" variable. In the context of a function closure, what is a "free" variable?

    - The free variable is the counter in the previous question. Free variables are variables that are not inside of the context of the function closure but are variables that are visible inside of the function closure.

8. The add( ) function defined in question 6 always adds 1 to the counter each time it is called. Write a definition of a function make_adder(inc), whose return value is an add function with increment value inc (instead of 1). Here is an example of using this function:

            add5 = make_adder(5);
            add5();
            add5();
            add5();
            // final counter value is 15
            add7 = make_adder(7);
            add7();
            add7();
            add7();
            // final counter value is 21
      
          var make_adder = (function(inc) {
            var counter = 0;
            return function() {
                counter += inc;
                return counter;
            }
        })();
    
9. Suppose you are given a file of Javascript code containing a list of many function and variable declarations. All of these function and variable names will be added to the Global Javascript namespace. What simple modification to the Javascript file can remove all the names from the Global namespace?

    - You can remove all of them using the module pattern, so they are not going to be in the global namespace anymore.

10. Using the Revealing Module Pattern, write a Javascript definition of a Module that creates an Employee Object with the following fields and methods:

        Private Field: name
        Private Field: age
        Private Field: salary
        Public Method: setAge(newAge)
        Public Method: setSalary(newSalary)
        Public Method: setName(newName)
        Private Method: getAge( )
        Private Method: getSalary( )
        Private Method: getName( )
        Public Method: increaseSalary(percentage)
        // uses private getSalary( )
        Public Method: incrementAge( )
        // uses private getAge( )

    var Employee = (function() {
        let name, age, salary;

        let setAge = function(a) {
            age = a;
        }

        let setName = function(n) {
            name = n;
        }

        let setSalary = function(s) {
            salary = s;
        }

        let getAge = function() {
            return age;
        }
        let getName = function() {
            return name;
        }
        let getSalary = function() {
            return salary;
        }
        let increaseSalary = function(percentage) {
            setSalary(getSalary + (getSalary() * percentage / 100));
        }
        let incrementAge = function(inc) {
            setAge(getAge() + inc);
        }
        return {
            setAge: setAge,
            setSalary: setSalary,
            setName: setName,
            increaseSalary: increaseSalary,
            incrementAge: incrementAge
        }
    })();
    
11. Rewrite your answer to Question 10 using the Anonymous Object Literal Return Pattern.

    var Employee = (function() {
        let name, age, salary;

        let getAge = function() {
            return age;
        }
        let getName = function() {
            return name;
        }
        let getSalary = function() {
            return salary;
        }

        return {
            setAge: function(a) {
                age = a;
            },
            setSalary: function(s) {
                salary = s;
            },
            setName: = function(n) {
                name = n;
            },
            increaseSalary: function(percentage) {
                setSalary(getSalary + (getSalary() * percentage / 100));
            },
            incrementAge: function(inc) {
                setAge(getAge() + inc);
            }

        }
    })();
      
12. Rewrite your answer to Question 10 using the Locally Scoped Object Literal Pattern.

    var Employee = (function() {
        let name, age, salary;

        var emp = {};

        emp.setAge = function(a) {
            age = a;
        }
        emp.setName = function(n) {
            name = n;
        }
        emp.setSalary = function(s) {
            salary = s;
        }

        let getAge = function() {
            return age;
        }
        let getName = function() {
            return name;
        }
        let getSalary = function() {
            return salary;
        }
        emp.increaseSalary = function(percentage) {
            setSalary(getSalary + (getSalary() * percentage / 100));
        }
        emp.incrementAge = function(inc) {
            setAge(getAge() + inc);
        }
        return emp;

    })();
   
13. Write a few Javascript instructions to extend the Module of Question 10 to have a public address field and public methods setAddress(newAddress) and getAddress( ).

    Employee.address = “North st”;
    Employee.setAddress = function(a) {
        this.address = a;
    }
    Employee.getAddress = function() {
        return this.address;
    }
        
14. What is the output of the following code?

    const promise = new Promise((resolve, reject) => {
        reject(“Hattori”);
    });
    Promise.then(val => alert(“Success: “+val))
        .catch(e => alert(“Error: “+e));
   
    - It’s going to execute the promise and return an alert with “Error: Hattori”

15. What is the output of the following code?

    const promise = new Promise((resolve, reject) => {
        resolve(“Hattori”);
        setTimeout(() => reject(“Yoshi”), 500);
    });
    promise.then(val => alert(“Success: “+val))
        .catch(e => alert(“Error: “+e));
    
    - It’s going to show an alert with “Success Hattori” and Once the promise has settled, it cannot be changed. 
    - Rejecting it after 500 mili seconds will not show an alert with “Error: Yoshi” because it will ot effect the event handler.

16. What is the output of the following code?

        function job(state) {
            return new Promise(function(resolve, reject) {
                if (state) {
                    resolve('success');
                } else {
                    reject('error');
                }
            });
        }

        let promise = job(true);
        promise.then(function(data) {
            console.log(data);
            return job(false);
        }).catch(function(error) {
            console.log(error);
            return 'Error caught';
        });
    
    - It’s going to print in the console success and after will print error.
